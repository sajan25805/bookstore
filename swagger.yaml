swagger: "2.0"
info:
  title:  This is a simple  Bookstore API 
  description: |-
    It is a  basic web service for a book management system that allows the API user to add new books, delete existing books, update existing books, and list registered books.

  version: 1.0
  contact:
    email: sajanrajmainali99@gmail.com
  # liscence:
  #   name: Apache 2.0
  #   url: "http://www.apache.org/liscences/LIS"

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  servers:
    -url: http://localhost:4000
    description: THis is my local Server

securityDefinitions:
  application:
    type: basic
security: 
  - application: []
schemes: [http]

paths:
    /books/add:
      post:
        summary: Adds book to the database.
          produces: -application/json
          consumes: -multipart/form-data
        parameters:
          - in: formData
            name: name
            type: string

          - in: formData
            name: isbn
            type: string

          - in: formData
            name: image
            type: file
            description: Image of book to be uploaded.
        responses:
          200:
            description: success
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                  example: harayeko yatri
                isbn:
                  type: string
                  example: 111456
                image:
                  type: string
                  example: photo.jpg
          400:
              description: Error
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Error during Adding the book

                  
    /books/{id}:
      get:
        summary: Returns a Book by ID.
        description: Returns the Specific Book
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type : integer
              format: int64
        responses: 
          200:
            description: Successfully Added
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                  example: harayeko yatri
                isbn:
                  type: string
                  example: 213215
                image:
                  type: string
                  example: photo.jpg
          400:
              description:  Error BOOK ID Invalid
              schema:
                type: object  
          404:
              description: Not Found
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: BOOK_ID_NOT_PROVIDED

                          
              
    /books:
      get:
        summary: Returns a list of Books.
        description: Books which are already registered.
        responses:
          200: # status code
            description: Successul Response
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                    example: harayeko yatri
                  isbn:
                    type: string
                    example: 213215
                  image:
                    type: string
                    example: photo.jpg

    /books/search/all:
      get:
        summary: Returns a user by search query string.
        description: Returns the Specific User
        parameters:
          - in: query
            name: q
            type: string
            required: true
        responses: 
          200: # status code
            description: Successul Response
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                    example: harayeko yatri
                  isbn:
                    type: string
                    example: 213215
                  image:
                    type: string
                    example: photo.jpg
          400:
              description:  Empty Query
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Empty Query Search String 

    /books/update/{id}:
      put:
        summary: Update a Book by ID.
        description: Updates the Specific Book
          consumes:
          - multipart/form-data
          - application/json
          produces: 
          - application/json            
        parameters:
          - in: path
            name: id 
            type : integer
            format: int64          
            required: true
          - in: formData
            name: name
            type: string

          - in: formData
            name: isbn
            type: string

          - in: formData
            name: image
            type: file
            description: Image of book to be uploaded.
        responses:
          200:
            description: Successfully Added
            schema:
              type: object
              properties:
                success:
                  type: boolean
                message:
                  type: string
                  example: Successfully Updated to the Database
          400:
              description:  Error BOOK ID Invalid
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Book ID Invalid   
          404:
              description: Not Found
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: BOOK_ID_NOT_PROVIDED

    /books/delete/{id}:
      delete:
        summary: Deletes the book by ID.
        description: Deletes the specific book.
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type : integer
              format: int64
        responses: 
          200:
            description: Successfully Deleted 
            schema:
              type: object
              properties:
                success:
                  type: boolean
                message:
                  type: string
                  example: Successfully Deleted
          400:
              description:  Error BOOK ID Invalid
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Couldn't Delete 
          404:
              description: Not Found
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: BOOK_ID_NOT_PROVIDED 




              



            


